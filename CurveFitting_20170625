import numpy as np
import matplotlib.pyplot as plt
# 导入多项式拟合工具
from numpy import polyfit, poly1d

x = np.linspace(-5, 5, 100)
y = 4 * x + 1.5
noise_y = y + np.random.randn(y.shape[-1]) * 2.5

# 画出数据

p1 = plt.plot(x, noise_y, 'rx')
p1 = plt.plot(x, y, 'b:')
plt.show()

# 进行线性拟合,一阶多项式 y = a1 * x + a0
coeff = polyfit(x, noise_y, 1)
print(coeff)

# 画出拟合曲线
p2 = plt.plot(x, noise_y, 'rx')
y = coeff[0] * x + coeff[1]
p2 = plt.plot(x, y, 'k-')
p2 = plt.plot(x, y, 'b--')
plt.show()

# 生成多项式对象
f = poly1d(coeff)
p3 = plt.plot(x, noise_y, 'rx')
p3 = plt.plot(x, f(x))
plt.show()
print(f)

# 多项式拟合正弦函数
x = np.linspace(-3 * np.pi, 3 * np.pi, 100)
y = np.sin(x)
# 用一阶到十一阶多项式拟合
y1 = poly1d(polyfit(x, y, 1))
y3 = poly1d(polyfit(x, y, 3))
y5 = poly1d(polyfit(x, y, 5))
y7 = poly1d(polyfit(x, y, 7))
y9 = poly1d(polyfit(x, y, 9))
y11 = poly1d(polyfit(x, y, 11))

x = np.linspace(-3 * np.pi, 3 * np.pi, 100)

p = plt.plot(x, np.sin(x), 'k')
p = plt.plot(x, y1(x))
p = plt.plot(x, y3(x))
p = plt.plot(x, y5(x))
p = plt.plot(x, y7(x))
p = plt.plot(x, y9(x))
p = plt.plot(x,y11(x))
a = plt.axis([-3 * np.pi, 3 * np.pi, -1.25, 1.25])
plt.show()
